package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// configCmd represents the config command
var configCmd = &cobra.Command{
	Use:   "config",
	Short: "Manage berga configuration",
	Long:  `Configure berga settings, manage templates, and initialize your personal configuration.`,
}

// configInitCmd initializes berga configuration
var configInitCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize berga configuration",
	Long:  `Create the initial berga configuration directory and files.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		return initializeBergaConfig()
	},
}

// configShowCmd shows current configuration
var configShowCmd = &cobra.Command{
	Use:   "show",
	Short: "Show current configuration",
	Long:  `Display the current berga configuration values and paths.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		return showConfiguration()
	},
}

// configPathCmd shows configuration paths
var configPathCmd = &cobra.Command{
	Use:   "path",
	Short: "Show configuration paths",
	Long:  `Display the paths where berga stores configuration, scripts, and templates.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		return showPaths()
	},
}

func init() {
	rootCmd.AddCommand(configCmd)
	configCmd.AddCommand(configInitCmd)
	configCmd.AddCommand(configShowCmd)
	configCmd.AddCommand(configPathCmd)
}

func initializeBergaConfig() error {
	configDir := GetConfigDir()
	scriptsDir := GetScriptsDir()
	templatesDir := GetTemplatesDir()

	// Create directories
	dirs := []string{configDir, scriptsDir, templatesDir}
	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
		fmt.Printf("Created directory: %s\n", dir)
	}

	// Create default config file
	configFile := filepath.Join(configDir, "config.yaml")
	if _, err := os.Stat(configFile); os.IsNotExist(err) {
		defaultConfig := `# Berga Configuration File
# This file stores your personal berga settings

# Default editor for editing scripts and configs
editor: ""

# Default shell for script execution
shell: ""

# Script execution settings
scripts:
  timeout: 300  # seconds
  verbose: false

# Template settings
templates:
  author: ""
  email: ""

# Aliases for frequently used commands
aliases: {}
`
		if err := os.WriteFile(configFile, []byte(defaultConfig), 0644); err != nil {
			return fmt.Errorf("failed to create config file: %w", err)
		}
		fmt.Printf("Created config file: %s\n", configFile)
	}

	// Create example script
	exampleScript := filepath.Join(scriptsDir, "hello.sh")
	if _, err := os.Stat(exampleScript); os.IsNotExist(err) {
		scriptContent := `#!/bin/bash
# Example berga script
echo "Hello from berga! This is an example script."
echo "Script arguments: $@"
`
		if err := os.WriteFile(exampleScript, []byte(scriptContent), 0755); err != nil {
			return fmt.Errorf("failed to create example script: %w", err)
		}
		fmt.Printf("Created example script: %s\n", exampleScript)
	}

	// Create example template
	exampleTemplate := filepath.Join(templatesDir, "gitignore.tmpl")
	if _, err := os.Stat(exampleTemplate); os.IsNotExist(err) {
		templateContent := `# {{.ProjectName}} - Generated by berga
# Logs
*.log

# Dependencies
node_modules/
vendor/

# Build artifacts
dist/
build/
*.exe

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
Thumbs.db
`
		if err := os.WriteFile(exampleTemplate, []byte(templateContent), 0644); err != nil {
			return fmt.Errorf("failed to create example template: %w", err)
		}
		fmt.Printf("Created example template: %s\n", exampleTemplate)
	}

	fmt.Println("\nBerga configuration initialized successfully!")
	fmt.Printf("Edit your config at: %s\n", configFile)
	fmt.Printf("Add scripts to: %s\n", scriptsDir)
	fmt.Printf("Add templates to: %s\n", templatesDir)

	return nil
}

func showConfiguration() error {
	fmt.Println("Berga Configuration:")
	fmt.Println("===================")
	
	if viper.ConfigFileUsed() != "" {
		fmt.Printf("Config file: %s\n", viper.ConfigFileUsed())
	} else {
		fmt.Println("Config file: Not found")
	}
	
	fmt.Printf("Verbose: %v\n", viper.GetBool("verbose"))
	
	// Show other config values if they exist
	if editor := viper.GetString("editor"); editor != "" {
		fmt.Printf("Editor: %s\n", editor)
	}
	
	if shell := viper.GetString("shell"); shell != "" {
		fmt.Printf("Shell: %s\n", shell)
	}

	return nil
}

func showPaths() error {
	fmt.Println("Berga Paths:")
	fmt.Println("============")
	fmt.Printf("Config directory: %s\n", GetConfigDir())
	fmt.Printf("Scripts directory: %s\n", GetScriptsDir())
	fmt.Printf("Templates directory: %s\n", GetTemplatesDir())

	// Check if directories exist
	paths := map[string]string{
		"Config":    GetConfigDir(),
		"Scripts":   GetScriptsDir(),
		"Templates": GetTemplatesDir(),
	}

	fmt.Println("\nDirectory Status:")
	for name, path := range paths {
		if _, err := os.Stat(path); os.IsNotExist(err) {
			fmt.Printf("  %s: ❌ Not found\n", name)
		} else {
			fmt.Printf("  %s: ✅ Exists\n", name)
		}
	}

	return nil
}
